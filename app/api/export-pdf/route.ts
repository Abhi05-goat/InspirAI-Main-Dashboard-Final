import { NextRequest, NextResponse } from 'next/server'
import puppeteer from 'puppeteer'

export async function POST(request: NextRequest) {
  try {
    const { data } = await request.json()

    const html = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>InspirAI Analysis Report</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 40px; color: #333; }
        .header { text-align: center; margin-bottom: 40px; border-bottom: 2px solid #3B82F6; padding-bottom: 20px; }
        .section { margin-bottom: 30px; }
        .section h2 { color: #3B82F6; border-bottom: 1px solid #E5E7EB; padding-bottom: 10px; }
        .confidence-score { background: #F3F4F6; padding: 15px; border-radius: 8px; }
        .trends, .niches { background: #F9FAFB; padding: 15px; border-radius: 8px; }
        .competitor { background: #FEF2F2; padding: 10px; margin: 10px 0; border-radius: 6px; }
        ul { padding-left: 20px; }
        li { margin-bottom: 8px; }
        .footer { margin-top: 40px; text-align: center; color: #6B7280; font-size: 12px; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>InspirAI Analysis Report</h1>
        <h2>${data.Groq_PS_output?.title || 'Business Analysis'}</h2>
        <p>Generated on ${new Date().toLocaleDateString()}</p>
      </div>

      <div class="section">
        <h2>üí° Original Idea</h2>
        <p>${data.raw_idea}</p>
      </div>

      <div class="section">
        <h2>‚ú® Refined Idea</h2>
        <p>${data.Groq_PS_output?.refined_idea || 'N/A'}</p>
      </div>

      <div class="section confidence-score">
        <h2>üìä Confidence Score: ${data.confidence}/10</h2>
        <p>${data.Groq_PS_output?.confidence_reason || 'N/A'}</p>
      </div>

      <div class="section">
        <h2>üéØ Problem Statement</h2>
        <p>${data.Groq_PS_output?.problem_statement || 'N/A'}</p>
      </div>

      <div class="section">
        <h2>üöÄ Proposed Solution</h2>
        <p>${data.Groq_PS_output?.proposed_solution || 'N/A'}</p>
      </div>

      <div class="section">
        <h2>üìà Market Trends</h2>
        <div class="trends">
          ${data.Perplexity_trend_output?.trends?.map((trend: any) => 
            `<p>‚Ä¢ ${typeof trend === 'string' ? trend : trend.trend || trend.description}</p>`
          ).join('') || '<p>No trends available</p>'}
        </div>
      </div>

      <div class="section">
        <h2>üè¢ Competitor Analysis</h2>
        ${Object.entries(data.Perplexity_trend_output?.analysis || {}).map(([name, details]: [string, any]) => `
          <div class="competitor">
            <h3>${name}</h3>
            <p><strong>Pros:</strong> ${details.pros?.join(', ') || 'N/A'}</p>
            <p><strong>Cons:</strong> ${details.cons?.join(', ') || 'N/A'}</p>
            <p><strong>Opportunity:</strong> ${details.opportunity || 'N/A'}</p>
          </div>
        `).join('')}
      </div>

      <div class="section">
        <h2>üéØ Business Niches</h2>
        <div class="niches">
          ${data.Perplexity_trend_output?.niche_identification?.map((niche: any) => 
            `<p>‚Ä¢ ${typeof niche === 'string' ? niche : niche.niche || niche.description}</p>`
          ).join('') || '<p>No niches available</p>'}
        </div>
      </div>

      <div class="footer">
        <p>Generated by InspirAI - AI-Powered Business Ideation Platform</p>
        <p>Motivation: ${data.motivation}</p>
      </div>
    </body>
    </html>
    `

    const browser = await puppeteer.launch({ headless: true })
    const page = await browser.newPage()
    await page.setContent(html)
    const pdf = await page.pdf({
      format: 'A4',
      printBackground: true,
      margin: { top: '20px', bottom: '20px', left: '20px', right: '20px' }
    })
    await browser.close()

    return new NextResponse(pdf, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': 'attachment; filename="inspirai-analysis.pdf"'
      }
    })

  } catch (error) {
    console.error('PDF export error:', error)
    return NextResponse.json({ error: 'PDF generation failed' }, { status: 500 })
  }
}